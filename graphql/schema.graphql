type User {
  _id: ID!
  name: String
  email: String
  password: String
  avatar: String
  online: Boolean
  lastSeen: String
}

enum MessageType {
  text
  image
  video
  audio
  file
}

type Message {
  _id: ID!
  chatId: ID!
  content: String!
  type: MessageType!
  sender: User!
  readBy: [User]!
  createdAt: String!
  updatedAt: String!
}

input MessageInputData {
  chatId: ID
  users: [ID!]
  content: String!
  type: MessageType!
}

enum ChatType {
  private
  group
}

type Chat {
  _id: ID!
  name: String!
  type: ChatType!
  lastMessage: Message
  unreadMessagesCount: Int
  users: [User]!
  createdAt: String!
  updatedAt: String!
}

input ChatInputData {
  users: [ID]!
  name: String!
}

input CreateUserData {
  name: String!
  email: String!
  password: String!
  passwordConfirmation: String!
  avatar: String
}

input UserInputData {
  email: String!
  password: String!
}

input changePasswordInputData {
  oldPassword: String!
  newPassword: String!
  passwordConfirmation: String!
}
scalar Upload

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

input editProfileData {
  name: String!
  avatar: Upload
}

type AuthData {
  user: User!
  token: String!
}

type Query {
  hello: String
  #Auth
  getUser: User!
  refreshToken: AuthData!
  #Chat
  getUserChats: [Chat]!
  #Message
  getChatMessages(chatId: ID!): [Message]!
  getMessageInfo(messageId: ID!): Message!
  #Contact
  getContacts: [User]
}

type Mutation {
  #Auth
  login(userInput: UserInputData!): AuthData!
  createUser(userInput: CreateUserData!): String!
  changePassword(userInput: changePasswordInputData!): String!
  editProfile(userInput: editProfileData!): User!
  singleUpload(file: Upload!): File!
  #Chat
  createChat(chatInput: ChatInputData!): Chat!
  #Message
  sendMessage(messageInput: MessageInputData!): Message!
  markMessageAsSeen(chatId: ID!): String!
  #Contact
  addContact(email: String!): String!
  deleteContact(userId: ID!): String!
}
